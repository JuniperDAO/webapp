#!/usr/bin/env python3

import argparse
import os
import sys
import json
import subprocess

from google.cloud import secretmanager

from config import PROJECT_ID, SECRET_VERSION


def main():
    # Create command line arguments parser
    parser = argparse.ArgumentParser(
        description="Set secret as environment variables and spawn subprocess."
    )
    parser.add_argument("secret_name", type=str, help="Name of the secret")
    parser.add_argument(
        "command_path", type=str, help="Path to the command to be spawned"
    )
    parser.add_argument(
        "-p",
        "--next-public-only",
        action="store_true",
        help="Only pass on NEXT_PUBLIC_... variables",
    )
    parser.add_argument(
        "-e",
        "--env",
        action="append",
        help="Override environment variables from the secret in the format KEY=VALUE",
    )
    parser.add_argument(
        "--postgres-sql-proxy",
        action="store_true",
        help="Override POSTGRES_PRISMA_URL= to use the local GCP SQL proxy",
    )

    # Parse the command line arguments
    args = parser.parse_args()

    # Call the function to set the secret as environment variables and spawn subprocess

    # Initialize the Secret Manager client
    client = secretmanager.SecretManagerServiceClient()

    # Access the secret version
    secret_path = client.secret_version_path(
        PROJECT_ID, args.secret_name, SECRET_VERSION
    )
    response = client.access_secret_version(request={"name": secret_path})

    # Decode the secret value
    secret_value = response.payload.data.decode("UTF-8")

    # Parse the secret value as JSON
    secret_json = json.loads(secret_value)

    # Set each key/value pair in the environment
    for key, value in secret_json.items():
        if not args.next_public_only or key.startswith("NEXT_PUBLIC_"):
            os.environ[key] = value

    # Overwrite os.environ with the key value pairs from -e arguments
    if args.env:
        for env_var in args.env:
            key, value = env_var.split("=")
            os.environ[key] = value

    # Overwrite POSTGRES_PRISMA_URL with the local GCP SQL proxy, if needed
    if args.postgres_sql_proxy:
        os.environ["POSTGRES_PRISMA_URL"] = os.environ["POSTGRES_PRISMA_URL"].split(
            "?"
        )[0]

    # Spawn a subprocess that inherits the environment variables
    subprocess.run(args.command_path.split())


if __name__ == "__main__":
    main()
