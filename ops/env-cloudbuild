#!/usr/bin/env python3
import argparse
import inspect
import os
import sys
import types

from config import PROJECT_ID, SECRET_VERSION


def service_name():
    print(f'juniper-{os.environ["BRANCH_NAME"].split("/")[0]}')


def db_name():
    if os.environ["BRANCH_NAME"] == "main":
        print("db-main")
    else:
        print("db-staging")


def bucket_name():
    return service_name()


def secret_name():
    if os.environ["BRANCH_NAME"] == "main":
        print("juniper-main")
    else:
        print("juniper-staging")


def base_uri():
    if os.environ["BRANCH_NAME"] == "main":
        print("https://app.juniperfi.com")
    elif os.environ["BRANCH_NAME"] == "staging":
        print("https://juniper.wfi.dev")
    else:
        print(f'https://{os.environ["BRANCH_NAME"].split("/")[0]}.wfi.dev')


def hostname():
    if os.environ["BRANCH_NAME"] == "main":
        print("app.juniperfi.com")
    elif os.environ["BRANCH_NAME"] == "staging":
        print("juniper.wfi.dev")
    else:
        print(f'{os.environ["BRANCH_NAME"].split("/")[0]}.wfi.dev')


def subdomain():
    print(os.environ["BRANCH_NAME"].split("/")[0])


def path_matcher():
    if os.environ["BRANCH_NAME"] == "main":
        print("juniper-main")
    elif os.environ["BRANCH_NAME"] == "staging":
        print("juniper-wfi-dev")
    else:
        print(f'{os.environ["BRANCH_NAME"].split("/")[0]}-wfi-dev')


choices = [
    m[0]
    for m in inspect.getmembers(sys.modules[__name__])
    if isinstance(m[1], types.FunctionType)
]


def run(what):
    globals()[what]()


def main():
    # Create command line arguments parser
    parser = argparse.ArgumentParser(
        description="Emit values for cloudbuild based on the current branch name"
    )
    parser.add_argument(
        "what", type=str, help="what to emait", choices=choices + ["all"]
    )

    # Parse the command line arguments
    args = parser.parse_args()

    if args.what == "all":
        for c in choices:
            print(f"{c.upper()}=", end="")
            run(c)
    else:
        run(args.what)


if __name__ == "__main__":
    main()
