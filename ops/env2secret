#!/usr/bin/env python3

import argparse
import json
import os
import pprint

from dotenv import dotenv_values

from google.cloud import secretmanager
from google.api_core.exceptions import AlreadyExists

from config import PROJECT_ID, SECRET_VERSION


def main():
    # Create command line arguments parser
    parser = argparse.ArgumentParser(
        description="Create or update a secret in Google Cloud Secret Manager."
    )
    parser.add_argument("secret_name", type=str, help="Name of the secret")
    parser.add_argument(
        "file_name", type=str, help="Name of the file containing environment variables"
    )
    parser.add_argument(
        "-d",
        "--dry-run",
        action="store_true",
        help="Just print the JSON blob, do not update the secret",
    )

    # Parse the command line arguments
    args = parser.parse_args()

    # Load environment variables from the .env file
    env_variables = dotenv_values(args.file_name)
    assert (
        env_variables
    ), f"Could not load environment variables from file '{args.file_name}'"
    if args.dry_run:
        pprint.pprint(env_variables)
        return

    # Convert environment variables to JSON
    secret_value = json.dumps(env_variables)

    # Initialize the Secret Manager client
    client = secretmanager.SecretManagerServiceClient()

    # Create or update the secret
    parent = f"projects/{PROJECT_ID}"
    secret = {
        "name": f"{parent}/secrets/{args.secret_name}",
        "labels": {"env2secret": "true"},
        "replication": {"automatic": {}},
    }

    try:
        response = client.create_secret(
            parent=parent, secret_id=args.secret_name, secret=secret
        )
        print(f"Created new secret '{args.secret_name}'")
    except AlreadyExists:
        print(f"Updating existing secret '{args.secret_name}'")

    # If the secret already exists, add a new version
    response = client.add_secret_version(
        request={
            "parent": f"{parent}/secrets/{args.secret_name}",
            "payload": {"data": secret_value.encode()},
        }
    )
    print(
        f"Added a new version of secret '{args.secret_name}' with version ID: {response.name.split('/')[-1]}"
    )


if __name__ == "__main__":
    main()


# # Add the secret version
# payload = {"data": secret_value.encode("UTF-8")}
# response = client.add_secret_version(parent=response.name, payload=payload)
